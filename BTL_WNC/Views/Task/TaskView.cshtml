@* @model BTL_WNC.ViewModels.TaskViewModel

@{
    ViewData["Title"] = "Task";
}
<style>
    .task-column {
        max-height: 400px; /* Adjust the height as needed */
        overflow-y: auto;
        border: 1px solid #ccc;
        padding: 10px;
        border-radius: 5px;
        background-color: #f9f9f9;
    }

    .card-custom {
        margin-bottom: 10px;
    }
</style>

<link href="~/css/styletaskview.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.14.0/Sortable.min.js"></script>

<div class="container mt-5">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div class="title-decription">
            <h1>@Model.Project.Name</h1>
            <p>@Model.Project.Decription</p>
        </div>
        <input class="form-control me-2" id="taskSearch" type="search" placeholder="Search" aria-label="Search" style="width: 300px;">
    </div>

    <div class="row">
        <div class="col-md-6">
            <h3>Doing</h3>
            <div class="task-column">
                @foreach (var task in Model.DoingTasks)
                {
                    <div class="card card-custom">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <span class="fw-bold fs-5 task-name">@task.Title</span>
                            @if ((bool)ViewBag.IsAdmin)
                            {
                                <div>
                                    <a href="@Url.Action("EditTask", "Task", new { id = task.Id })" class="btn btn-warning btn-sm">Edit</a>
                                    <button class="btn btn-danger btn-sm" onclick="openDeleteModal('@task.Id')">Delete</button>
                                </div>
                            }
                        </div>
                        <div class="card-body">
                            <p class="card-text">@task.Content</p>
                            <p class="card-text"><strong>Due Date:</strong> @task.DueDate.ToString("dd MMM, yyyy")</p>
                        </div>
                        <div class="card-footer">
                            <ul>
                                @foreach (var user in task.Users)
                                {
                                    <li>@user.Name</li>
                                }
                            </ul>
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="col-md-6">
            <h3>Done</h3>
            <div class="task-column">
                @foreach (var task in Model.DoneTasks)
                {
                    <div class="card card-custom">
                         <div class="card-header d-flex justify-content-between align-items-center">
                            <span class="fw-bold fs-5 task-name">@task.Title</span>
                            @if ((bool)ViewBag.IsAdmin)
                            {
                                <div>
                                    <a href="@Url.Action("EditTask", "Task", new { id = task.Id })" class="btn btn-warning btn-sm">Edit</a>
                                    <button class="btn btn-danger btn-sm" onclick="openDeleteModal('@task.Id')">Delete</button>
                                </div>
                            }
                        </div>
                        <div class="card-body">
                            <p class="card-text">@task.Content</p>
                            <p class="card-text"><strong>Due Date:</strong> @task.DueDate.ToString("dd MMM, yyyy")</p>
                        </div>
                        <div class="card-footer">
                            <ul>
                                @foreach (var user in task.Users)
                                {
                                    <li>@user.Name</li>
                                }
                            </ul>
                        </div>
                    </div>
                }
            </div>
        </div>
        
    </div>
    @if ((bool)ViewBag.IsAdmin)
    {
        <div class="d-flex justify-content-center mt-4">
            <a href="@Url.Action("AddTask", "Task", new { projectId = Model.Project.Id })" class="btn btn-primary btn-wide" style="width: 500px;">+ Add New Task</a>
        </div>
    }
</div>

 <!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this task?
            </div>
            <div class="modal-footer">
                <form id="deleteForm" method="post" asp-action="DeleteTask">
                    <input type="hidden" name="taskId" id="deleteTaskId" />
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">Delete</button>
                </form>
            </div>
        </div>
    </div>
</div> 

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        //Xu ly tìm kiem
        document.getElementById('taskSearch').addEventListener('input', function () {
            var searchValue = this.value.toLowerCase();
            var userCards = document.querySelectorAll('.card-custom');

            userCards.forEach(function (card) {
                var name = card.querySelector('.task-name').textContent.toLowerCase();

                if (name.includes(searchValue)) {
                    card.style.display = '';
                } else {
                    card.style.display = 'none';
                }
            });
        });

        //Xoa
        function openDeleteModal(taskId) {
            document.getElementById('deleteTaskId').value = taskId;
            var deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
            deleteModal.show();
        }
    </script>
} 
 *@

@model BTL_WNC.ViewModels.TaskViewModel

@{
    ViewData["Title"] = "Task";
}

@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery

<form asp-antiforgery="true">
    @Html.AntiForgeryToken()
</form>

<style>
    .task-column {
        max-height: 400px;
        overflow-y: auto;
        border: 1px solid #ccc;
        padding: 10px;
        border-radius: 5px;
        background-color: #f9f9f9;
    }

    .card-custom {
        margin-bottom: 10px;
    }
</style>

<link href="~/css/styletaskview.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.14.0/Sortable.min.js"></script>

<div class="container mt-5">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div class="title-decription">
            <h1>@Model.Project.Name</h1>
            <p>@Model.Project.Decription</p>
        </div>
        <input class="form-control me-2" id="taskSearch" type="search" placeholder="Search" aria-label="Search" style="width: 300px;">
    </div>

    <div class="row">
        <div class="col-md-6">
            <h3>Doing</h3>
            <div id="doingTasks" class="task-column">
                @foreach (var task in Model.DoingTasks)
                {
                    <div class="card card-custom" data-task-id="@task.Id">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <span class="fw-bold fs-5 task-name">@task.Title</span>
                            @if ((bool)ViewBag.IsAdmin)
                            {
                                <div>
                                    <a href="@Url.Action("EditTask", "Task", new { id = task.Id })" class="btn btn-warning btn-sm">Edit</a>
                                    <button class="btn btn-danger btn-sm" onclick="openDeleteModal('@task.Id')">Delete</button>
                                </div>
                            }
                        </div>
                        <div class="card-body">
                            <p class="card-text">@task.Content</p>
                            <p class="card-text"><strong>Due Date:</strong> @task.DueDate.ToString("dd MMM, yyyy")</p>
                        </div>
                        <div class="card-footer">
                            <ul>
                                @foreach (var user in task.Users)
                                {
                                    <li>@user.Name</li>
                                }
                            </ul>
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="col-md-6">
            <h3>Done</h3>
            <div id="doneTasks" class="task-column">
                @foreach (var task in Model.DoneTasks)
                {
                    <div class="card card-custom" data-task-id="@task.Id">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <span class="fw-bold fs-5 task-name">@task.Title</span>
                            @if ((bool)ViewBag.IsAdmin)
                            {
                                <div>
                                    <a href="@Url.Action("EditTask", "Task", new { id = task.Id })" class="btn btn-warning btn-sm">Edit</a>
                                    <button class="btn btn-danger btn-sm" onclick="openDeleteModal('@task.Id')">Delete</button>
                                </div>
                            }
                        </div>
                        <div class="card-body">
                            <p class="card-text">@task.Content</p>
                            <p class="card-text"><strong>Due Date:</strong> @task.DueDate.ToString("dd MMM, yyyy")</p>
                        </div>
                        <div class="card-footer">
                            <ul>
                                @foreach (var user in task.Users)
                                {
                                    <li>@user.Name</li>
                                }
                            </ul>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    @if ((bool)ViewBag.IsAdmin)
    {
        <div class="d-flex justify-content-center mt-4">
            <a href="@Url.Action("AddTask", "Task", new { projectId = Model.Project.Id })" class="btn btn-primary btn-wide" style="width: 500px;">+ Add New Task</a>
        </div>
    }
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this task?
            </div>
            <div class="modal-footer">
                <form id="deleteForm" method="post" asp-action="DeleteTask">
                    <input type="hidden" name="taskId" id="deleteTaskId" />
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.14.0/Sortable.min.js"></script>

    <script>
        //Xu ly tìm kiem
        document.getElementById('taskSearch').addEventListener('input', function () {
            var searchValue = this.value.toLowerCase();
            var userCards = document.querySelectorAll('.card-custom');

            userCards.forEach(function (card) {
                var name = card.querySelector('.task-name').textContent.toLowerCase();

                if (name.includes(searchValue)) {
                    card.style.display = '';
                } else {
                    card.style.display = 'none';
                }
            });
        });

        //Xoa
        function openDeleteModal(taskId) {
            document.getElementById('deleteTaskId').value = taskId;
            var deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
            deleteModal.show();
        }

        //kéo thả task
        document.addEventListener('DOMContentLoaded', function () {
            var doingTasks = document.getElementById('doingTasks');
            var doneTasks = document.getElementById('doneTasks');

            new Sortable(doingTasks, {
                group: 'tasks',
                animation: 150,
                onEnd: function (evt) {
                    var itemEl = evt.item;
                    // Check which column the task is in now
                    if (itemEl.parentNode.id === 'doneTasks') {
                        updateTaskStatus(itemEl, 'Done');
                    } else {
                        updateTaskStatus(itemEl, 'Doing');
                    }
                }
            });

            new Sortable(doneTasks, {
                group: 'tasks',
                animation: 150,
                onEnd: function (evt) {
                    var itemEl = evt.item;
                    // Check which column the task is in now
                    if (itemEl.parentNode.id === 'doingTasks') {
                        updateTaskStatus(itemEl, 'Doing');
                    } else {
                        updateTaskStatus(itemEl, 'Done');
                    }
                }
            });

            function updateTaskStatus(taskElement, newStatus) {
                var taskId = taskElement.getAttribute('data-task-id');
                var token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                console.log('updateTaskStatus called');
                console.log('taskId:', taskId);
                console.log('newStatus:', newStatus);

                fetch('/Task/UpdateStatus', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify({
                        TaskId: taskId,
                        NewStatus: newStatus
                    })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            console.log('Task status updated successfully');
                        } else {
                            console.error('Failed to update task status:', data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
            }
        });
    </script>
}









